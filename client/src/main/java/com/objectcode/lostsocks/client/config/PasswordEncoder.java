package com.objectcode.lostsocks.client.config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.security.SecureRandom;

public class PasswordEncoder {
    private static final Logger log = LoggerFactory.getLogger(PasswordEncoder.class);

    private final static byte[] JIDDER = new byte[]{
            -122, -103, -49, 116, 69, 23, -101, 15, 28, -97, 33, 3, -108, 119, 38, 25,
            -108, -91, -19, 39, 51, -42, -105, -7, 31, 40, -2, -41, -86, 101, -23, -26,
            -63, -21, 18, 111, 25, 78, 112, -119, -114, -114, -52, -1, 86, -114, 123, -86,
            126, 31, -61, 120, -69, -114, 76, 114, 109, 88, -101, -111, 62, -77, -72, 78,
            55, -78, 84, 109, 17, -82, -49, 117, 125, 100, -71, -127, -15, -31, 97, -99,
            -3, -62, -69, -68, -20, 54, 108, -102, 95, -93, 0, 105, -109, 57, -11, -114,
            19, -86, -27, 26, 74, 40, -112, -107, -116, 109, 32, -85, 124, -83, 101, 27,
            90, 20, 31, -16, -24, -43, 90, 122, 113, -15, -36, -68, -81, -68, -21, 74,
            -93, -24, 95, -45, -19, -94, -85, -31, -80, -38, 53, -83, -32, 46, -88, -72,
            -121, -43, -17, 105, 19, -3, -3, 68, -9, -31, -18, -73, -90, -106, 93, 21,
            106, -31, 69, 98, 11, -28, -87, 43, 69, 4, -122, 2, 61, 113, 87, -63,
            -1, -98, 125, 100, 113, -21, 96, -95, 70, -40, -51, 86, 91, 40, -42, 15,
            25, -73, -56, -27, 14, 114, 112, -72, 108, 120, 80, -13, 117, -18, 7, -37,
            14, -19, 34, -105, 3, -94, -3, 127, -88, -116, 88, -97, 6, 3, 79, -114,
            56, 88, 95, 115, -72, 35, -42, -102, -104, -31, 119, 124, 27, 61, -49, 49,
            -120, -60, 66, -122, -66, 120, -52, -100, 126, -10, 89, 38, 64, 43, 15, -68,
            -20, 113, -10, -5, 22, 120, -15, 47, 98, -40, -86, -97, 89, -36, -99, -42,
            -53, -74, 72, 108, -118, 49, 8, 72, 14, 93, 10, -68, 34, 6, 45, 114,
            116, -79, 17, 91, -73, -117, -25, 3, 67, -62, 6, 86, 95, -100, -68, -72,
            -42, 31, 96, 117, 62, 67, 76, -74, 37, 109, -64, 46, -89, -56, -95, 51,
            90, 46, 98, -14, 92, 63, -19, 97, 82, 101, 100, -17, -100, -128, -86, 4,
            -64, -88, 122, -76, -36, -15, 26, 45, -115, -127, 24, -90, 65, -10, 40, 120,
            101, 52, 0, 40, -92, 75, 52, 37, -97, -55, -77, -84, 109, -65, -112, -12,
            -2, -15, 16, -78, -68, 53, 98, 2, 93, 95, 113, -54, -59, 119, -128, -49,
            60, -28, 53, 65, -50, -94, 66, -46, 15, -26, -73, -92, 90, -10, -73, -83,
            -39, -37, -107, 120, -74, 80, 121, 83, -58, 100, -59, -74, 8, -112, -66, 122,
            -122, 71, 89, 35, 121, -54, -33, -62, 76, 79, -33, -55, -37, 14, 27, 104,
            4, 4, 69, -49, 58, -37, 74, -29, -124, -13, 122, -29, 35, 88, 68, 70,
            -39, 100, 127, 26, -69, 19, 105, -82, -88, -51, -36, 74, 83, 66, 76, -90,
            -1, -84, -86, -123, -71, -36, -46, 92, -111, 103, 103, 124, -92, 48, -65, -125,
            115, 4, -13, -31, 18, 64, 54, 55, -49, 93, 108, 38, 77, 100, 115, -52,
            -50, -11, -25, 54, -99, -120, -9, -12, 74, -95, -90, 100, -56, 35, -88, -45,
            76, -7, 96, 92, -53, 58, 119, 1, -5, -93, 99, -75, 64, 43, 109, 49,
            127, 109, 31, -23, -15, -72, 127, 115, -123, 117, -32, 70, -26, -97, 59, -2,
            17, -15, -31, -74, 61, 7, -87, 40, 98, 67, -35, 62, -5, -70, -6, 0,
            -75, -63, 9, 33, -106, 97, 123, -29, 34, -98, 4, -79, -56, 14, 34, -90,
            -51, 113, -53, 27, -67, 32, 47, -112, 86, 28, -106, 102, 104, 87, -1, -113,
            7, 99, 57, -109, -78, -8, -46, 32, 5, 27, -2, 38, 78, 30, 74, -18,
            -35, -50, 79, -111, -7, 127, -125, -84, -59, 1, 31, 10, -66, 50, 92, 91,
            -92, 15, 101, 52, 24, -28, -67, 79, -31, -76, 14, 85, -47, -24, 123, -48,
            45, -61, 28, 66, -112, 89, -88, -61, 3, -126, 20, 101, 127, -83, -9, 96,
            -28, 76, -16, -96, -88, 106, -49, 61, 17, 54, -38, 125, 6, -120, 58, -114,
            -3, 111, 2, 35, -28, -78, -110, -122, 8, 5, -112, 94, 127, 115, 58, 29,
            -36, -12, 78, 114, 101, -68, -60, -52, 22, -110, 46, 48, -20, 4, 44, 28,
            80, 13, -106, 85, -53, -21, 38, -104, 23, -104, -42, 58, -47, 78, 62, 59,
            62, -88, 33, 62, 59, 8, -4, -33, 87, 23, 95, -106, -50, 50, -19, 61,
            -57, -98, -31, -54, 49, 54, -99, -54, 76, -39, 68, -83, 106, 7, 13, -63,
            77, -95, -33, 5, 120, -38, -6, 110, 20, -92, 57, -93, 3, -84, 23, -89,
            126, -74, 102, 63, -121, -93, -49, 43, 54, -28, 120, 109, -94, 16, 83, -78,
            -15, -106, -22, -52, 120, -3, -20, 103, 98, -10, 25, -73, 43, 50, -38, 41,
            -45, -103, 26, -2, 99, -104, 102, 100, -60, 56, 33, 10, -12, 68, 34, 52,
            97, -52, -37, 51, 88, -74, 108, -59, -32, 65, -26, -27, 57, 37, -79, -116,
            86, 107, -16, -79, 109, 109, -49, -98, -18, 105, -85, 46, -78, 41, 51, -116,
            41, 24, 19, 25, -102, 127, -6, -121, 125, -55, 74, -53, 123, 74, -111, 42,
            -114, 121, 26, -44, -39, 47, 47, 2, 44, -122, -95, 116, -4, -14, 5, -17,
            -11, 115, -102, -28, -84, 64, -94, 14, 121, -128, 108, 113, -126, 120, -7, 126,
            62, -74, -29, -3, 2, 111, -125, -49, 73, 105, 101, 101, 81, -112, -1, -95,
            -92, -90, 71, -116, -121, -52, 14, 92, -68, 124, -69, 75, -19, 6, -94, 42,
            -72, 117, -109, -38, 104, -70, 80, 34, -71, 61, 81, 120, -26, 124, 5, -126,
            -68, 53, 36, -35, 0, -80, 52, 96, -4, 74, 2, 8, 112, -77, 123, 96,
            -46, -91, 41, 3, 22, -4, 13, 88, -90, -28, 80, 54, 78, -69, -82, -26,
            63, 78, 92, 30, -126, -8, -111, -90, -32, 95, 14, 82, 74, 82, 42, -93,
            95, 120, 79, -46, -29, 89, -14, -29, 48, -24, -31, 50, 106, 21, -84, -27,
            -113, 104, -29, -112, 6, -69, 78, 89, -65, -120, -53, 91, -101, 18, -68, 80};


    /**
     * Description of the Method
     *
     * @param password Description of the Parameter
     * @return Description of the Return Value
     */
    public static String encodePassword(String password) {
        if (password == null)
            return null;

        SecureRandom random = new SecureRandom();

        try {
            byte[] utfpassword = password.getBytes("UTF-8");
            byte[] crypted = new byte[utfpassword.length + 2];

            int offset = random.nextInt(256);
            int stride = random.nextInt(127) + 1;
            crypted[0] = (byte) offset;
            crypted[1] = (byte) stride;
            int i;

            int j = offset;

            for (i = 0; i < utfpassword.length; i++) {
                crypted[2 + i] = (byte) (JIDDER[j % JIDDER.length] ^ utfpassword[i]);
                j += stride;
            }

            StringBuilder hex = new StringBuilder();

            for (i = 0; i < crypted.length; i++) {
                hex.append(Character.forDigit((((int) crypted[i]) & 0xf0) >> 4, 16));
                hex.append(Character.forDigit((((int) crypted[i]) & 0xf), 16));
            }

            return hex.toString();
        } catch (Exception e) {
            log.error("Exception", e);
        }
        return "";
    }


    /**
     * Description of the Method
     *
     * @param encoded Description of the Parameter
     * @return Description of the Return Value
     */
    public static String decodePassword(String encoded) {
        if (encoded == null)
            return null;

        char[] hex = encoded.toCharArray();
        byte[] crypted = new byte[hex.length / 2];
        int i;
        int j;

        for (i = 0; i < crypted.length; i++) {
            crypted[i] = (byte) (Character.digit(hex[2 * i], 16) * 16 + Character.digit(hex[2 * i + 1], 16));
        }

        int offset = (int) crypted[0] & 0xff;
        int stride = (int) crypted[1] & 0xff;

        byte[] uftpassword = new byte[crypted.length - 2];

        j = offset;
        for (i = 0; i < uftpassword.length; i++) {
            uftpassword[i] = (byte) (JIDDER[j % JIDDER.length] ^ crypted[2 + i]);
            j += stride;
        }

        try {
            return new String(uftpassword, "UTF-8");
        } catch (Exception e) {
            log.error("Exception", e);
        }
        return "";
    }


    /**
     * The main program for the PasswordEncoder class
     *
     * @param args The command line arguments
     */
    public static void main(String[] args) {
        try {
            SecureRandom random = new SecureRandom();

            byte[] jidder = new byte[1024];

            random.nextBytes(jidder);

            for (int i = 0; i < jidder.length; i++) {
                System.out.print((int) jidder[i] + ", ");
                if (i % 16 == 15) {
                    System.out.println();
                }
            }
        } catch (Exception e) {
            log.error("Exception", e);
        }
    }
}
