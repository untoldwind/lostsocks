#####################################
# Socks via HTTP client property file
#####################################

# THIS FILE IS USED BY SOCKS VIA HTTP CLIENT PART
# PLEASE EDIT THIS FILE CAREFULLY OR
# THE PROGRAM WON'T WORK

# DO NOT MODIFY THE FOLLOWING LINE
[SocksViaHttp]

########################################
## MANDATORY OPTIONS
## PLEASE EDIT THESE OPTIONS CAREFULLY
########################################

#---------------------------------
# HTTP server access configuration
#---------------------------------

# URL of the servlet on the HTTP server, please replace "www.yourserver.com" by your server public name
# If you have changed the default HTTP port on the server, please replace "80" by the correct port
socks.http.servlet.url = http://tomcat.equeue.de/socks2http/socks

# Your login on the HTTP Server (see initsrv.properties)
socks.httpserver.user = USER1

# Your password on the HTTP Server (see initsrv.properties)
socks.httpserver.password = PASS1


#--------------------
# Proxy configuration
#--------------------

# Enable proxy (default = false)
# set this value to true if you pass through a proxy for your http access
# You can see this in your browser settings for example
# If you set false here, you can ignore all lines in the proxy configuration section
socks.proxy = false
# Proxy address is there is one, otherwise the default value is OK
socks.proxy.host = www.proxy.com
# Proxy port (default is 3128 for Squid, 8080 is often used too)
socks.proxy.port = 3128
# Set socks.proxy.authentication to true if your proxy needs authentication, default = false
# For NTLM proxy read the FAQ at http://cqs.dyndns.org
socks.proxy.authentication = false
# Your login on the proxy
socks.proxy.user = PROXYLOGIN
# Your password on the proxy
socks.proxy.password = PROXYPASSWD


#---------------------------
# Local server configuration
#---------------------------

# Socks Server port (default = 1080)
# 1080 is the default port of the socks protocol (as specified in the RFC)
# You should not change this value, unless you know what you are doing
socks.server.port = 1080

# If you want to share your socks server with other users on other computers, set socks.listen.localhost to false
# The default value is more secure however
socks.listen.localhost = true


#-------------------------------
# Direct tunneling configuration
#-------------------------------

# The following line defines the ports we have to listen to (on the localhost)
# You can add as many port as you want, but this ports must not
# be in use on the localhost. Separator is comma
# For each port listed here, a tunnel to a remote host will be created (look at the next option)
#tunnel.ports.active = 5900, 7000

# For each port defined in the previous line, define the destination of the tunnel, syntax hostname:port or hostIP:port
# THIS IS MANDATORY (of course not if you don't use direct tunneling)
#tunnel.localport.5900 = myvncserver.com:5900
#tunnel.localport.7000 = myircserver.org:6667


########################################
## ADVANCED OPTIONS
## DON'T CHANGE ANYTHING BELOW THIS LINE
## IF YOU DON'T KNOW WHAT YOU'RE DOING
########################################

#----------------------
# Logging configuration
#----------------------

# Path of the logfile
client.logfile.name = socksclient.log
# Logfile level (0=ALL, 1=DEBUG, 2=INFO, 3=WARN, 4=ERROR, 5=FATAL, 6=OFF), level 6 means that no logfile will be created
client.logfile.level = 2


#-----------------------
# Spy mode configuration
#-----------------------

# The spy mode allows the client to create a file per connection, containing all transferred data
# Be careful, the logfiles could become very large. I do NOT recommend to use this option (except for debugging)
# The value can be 0(none), 1(log data sent by the client), 2(log data sent by the server)
# or 3(log both)
client.spymode = 0


#----------------------
# Minimize HTTP traffic
#----------------------

# Contact the server only if the client has new data to send
# USE THIS OPTION ONLY IF YOUR HTTP TRAFFIC IS LIMITED !!!
# I do NOT recommend to use this option.
socks.requestonlyifclientactivity = false

# During this delay (in ms), the client will not try to minimize HTTP traffic
# This option is useful because a lot of traffic is generated when a connection is
# establishing between a client and a server.
# The default value (10s) should be fine
socks.donttrytominimizetrafficbefore = 10000

# After this delay (in ms), a request to the server is performed even if there is no client activity
# A delay of 0 means no update is forced (I DO NOT RECOMMEND THE VALUE 0 AT ALL)
socks.forcerequestafter = 10000


#---------------------------------
# Resistance to HTTP request drops
#---------------------------------

# The two following options allow Socks via HTTP to be used even with a bad connection line or a poor proxy.
# The client makes up to socks.maxretries retries to get a successful response from the server (0 means no retry is performed)
# If after all the retries the client hasn't got a successful connection from the server, the connection is closed
# The delay between two retries is in ms
socks.maxretries = 10
socks.delaybetweenretries = 3000


#-----------------------------
# Connection timeout on server
#-----------------------------

# Timeout (in seconds) for a connection (information sent to the HTTP server)
# If a connection isn't used during this time, it is automatically closed
# If you leave the default value, the default server timeout will be used (see initsrv.properties)
socks.httpserver.timeout = 180


#------------------------
# Customize client engine
#------------------------

# Delay (in ms) between two request on the server
# DO NOT CHANGE THE DEFAULT VALUE (20ms)
socks.delay = 20
